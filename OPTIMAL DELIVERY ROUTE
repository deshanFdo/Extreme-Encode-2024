#!/bin/python3

from itertools import permutations
from collections import deque
import sys

DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]

def bfs(start, end, grid):
    rows, cols = len(grid), len(grid[0])
    queue = deque([(start, [start])])
    visited = set()
    visited.add(start)

    while queue:
        current, path = queue.popleft()
        if current == end:
            return path
        for direction in DIRECTIONS:
            next_row, next_col = current[0] + direction[0], current[1] + direction[1]
            if (0 <= next_row < rows and 0 <= next_col < cols and 
                grid[next_row][next_col] == 0 and (next_row, next_col) not in visited):
                visited.add((next_row, next_col))
                queue.append(((next_row, next_col), path + [(next_row, next_col)]))

    return []

def create_distance_matrix(points, grid):
    num_points = len(points)
    distance_matrix = [[float('inf')] * num_points for _ in range(num_points)]
    paths = [[None] * num_points for _ in range(num_points)]
    for i in range(num_points):
        for j in range(num_points):
            if i != j:
                path = bfs(points[i], points[j], grid)
                if path:
                    distance_matrix[i][j] = len(path) - 1
                    paths[i][j] = path
    return distance_matrix, paths

def tsp_solver(distance_matrix):
    num_points = len(distance_matrix)
    min_distance = float('inf')
    best_path = []
    for perm in permutations(range(num_points)):
        current_distance = 0
        valid = True
        for i in range(num_points - 1):
            if distance_matrix[perm[i]][perm[i + 1]] == float('inf'):
                valid = False
                break
            current_distance += distance_matrix[perm[i]][perm[i + 1]]
        if valid and distance_matrix[perm[-1]][perm[0]] != float('inf'):
            current_distance += distance_matrix[perm[-1]][perm[0]]
            if current_distance < min_distance:
                min_distance = current_distance
                best_path = perm
    return best_path, min_distance

def generate_full_path(best_path_indices, paths):
    full_path = []
    for i in range(len(best_path_indices) - 1):
        path = paths[best_path_indices[i]][best_path_indices[i + 1]]
        if path:
            if full_path and full_path[-1] == path[0]:
                path.pop(0)
            full_path.extend(path)
    if best_path_indices:
        path = paths[best_path_indices[-1]][best_path_indices[0]]
        if path:
            if full_path and full_path[-1] == path[0]:
                path.pop(0)
            full_path.extend(path)
    return full_path

if __name__ == '__main__':
    input = sys.stdin.read
    data = input().strip().split('\n')

    rows, cols = map(int, data[0].strip().split())
    sequence = list(map(int, data[1].strip().split()))
    num_houses = int(data[2].strip())
    house_coords_flat = list(map(int, data[3].strip().split()))
    house_coordinates = [(house_coords_flat[i], house_coords_flat[i + 1]) for i in range(0, len(house_coords_flat), 2)]
    max_distance = float(data[4].strip())

    grid = []
    for i in range(rows):
        grid.append(sequence[i * cols:(i + 1) * cols])

    points = [(0, 0)] + house_coordinates

    distance_matrix, paths = create_distance_matrix(points, grid)
    
    optimal_path_indices, total_distance = tsp_solver(distance_matrix)

    full_path = generate_full_path(optimal_path_indices, paths)

    if total_distance <= max_distance:
        for point in full_path:
            print(f"{point[0]} {point[1]}")
    else:
        print("")
